"""Generates the environment markdown files."""

from __future__ import annotations

import inspect
import os
import re

import gymnasium

import gymnasium_hardmaze  # noqa: F401


def env_name_format(name: str) -> str:
    """Format the environment name for titles.

    - Turns "HardMaze" into "Hard Maze".
    - Removes "Env" and version suffixes.

    Args:
        name: The environment name to format.

    Returns:
        The formatted name.
    """
    name = name.replace("Env", "").replace("V0", " V0")
    # Add a space before uppercase letters
    name = re.sub(r"([a-z])([A-Z])", r"\1 \2", name)
    return name


# Path to the docs directory
ROOT_DIR = os.path.dirname(os.path.dirname(os.path.dirname(__file__)))
ENVS_DIR = os.path.join(ROOT_DIR, "docs", "environments")


# Get all registered environments
all_envs = list(gymnasium.registry.values())

# Filter for environments in the gymnasium_hardmaze package
# This is now robust against non-string entry_points
hardmaze_envs = [
    spec
    for spec in all_envs
    if isinstance(spec.entry_point, str)
    and spec.entry_point.startswith("gymnasium_hardmaze.")
]

if not hardmaze_envs:
    print("No environments found for gymnasium_hardmaze.")
    exit()

# Since there is only one core environment, we'll create a single page for it.
# We will explicitly look for HardMaze-v0 to ensure we document the correct one.
env_spec = next((spec for spec in hardmaze_envs if spec.id == "HardMaze-v0"), None)

if env_spec is None:
    print("Could not find the 'HardMaze-v0' environment to document.")
    exit()

env = env_spec.make()
# Use inspect.getdoc() for clean, dedented docstrings
docstring = inspect.getdoc(env.unwrapped) or "No information provided."

# Define the output directory and file
env_group = "hardmaze"
output_dir = os.path.join(ENVS_DIR, env_group)
os.makedirs(output_dir, exist_ok=True)
output_path = os.path.join(output_dir, "index.md")

env_title = "Hard Maze"

# Using repr() is more robust than parsing the string representation
action_space_table = f"```{env.action_space!r}```"
observation_space_table = f"```{env.observation_space!r}```"


# --- Create Markdown File Content ---

# Front Matter
front_matter = f"""---
autogenerated:
title: {env_title}
---
"""

# Title and GIF
title_and_gif = f"""# {env_title}

```{{figure}} /_static/videos/{env_group}/{env_group}.gif
:alt: {env_title}
:width: 200px
```
"""

# Environment Attributes Table
env_attributes = f"""
| | |
|---|---|
| Action Space | {action_space_table} |
| Observation Space | {observation_space_table} |
| Creation | gymnasium.make("{env_spec.id}") |
"""

# Docstring
if docstring is None:
    docstring = "No information provided"

# --- Assemble and Write File ---

all_text = f"""{front_matter}
{title_and_gif}
{env_attributes}
{docstring}
"""

with open(output_path, "w", encoding="utf-8") as f:
    f.write(all_text)

print(f"Generated docs for {env_spec.id} at {output_path}")
